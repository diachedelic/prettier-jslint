// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`arrow_call.js format 1`] = `
====================================options=====================================
parsers: ["babel"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
const testResults = results.testResults.map(testResult =>
  formatResult(testResult, formatter, reporter)
);

it('mocks regexp instances', () => {
  expect(
    () => moduleMocker.generateFromMetadata(moduleMocker.getMetadata(/a/)),
  ).not.toThrow();
});

expect(() => asyncRequest({ url: "/test-endpoint" }))
  .toThrowError(/Required parameter/);

expect(() => asyncRequest({ url: "/test-endpoint-but-with-a-long-url" }))
  .toThrowError(/Required parameter/);

expect(() => asyncRequest({ url: "/test-endpoint-but-with-a-suuuuuuuuper-long-url" }))
  .toThrowError(/Required parameter/);

expect(() => asyncRequest({ type: "foo", url: "/test-endpoint" }))
  .not.toThrowError();

expect(() => asyncRequest({ type: "foo", url: "/test-endpoint-but-with-a-long-url" }))
  .not.toThrowError();

const a = Observable
  .fromPromise(axiosInstance.post('/carts/mine'))
  .map((response) => response.data)

const b = Observable.fromPromise(axiosInstance.get(url))
  .map((response) => response.data)

// func(
//   veryLoooooooooooooooooooooooongName,
//   veryLooooooooooooooooooooooooongName =>
//     veryLoooooooooooooooongName.something()
// );

promise.then(result => result.veryLongVariable.veryLongPropertyName > someOtherVariable ? "ok" : "fail");

=====================================output=====================================
const test_results = results.testResults.map((test_result) => formatResult(
    test_result,
    formatter,
    reporter
));

it("mocks regexp instances", function () {
    expect(() => moduleMocker.generateFromMetadata(
        moduleMocker.getMetadata(/a/)
    )).not.toThrow();
});

expect(() => asyncRequest({url: "/test-endpoint"})).toThrowError(
    /Required\\sparameter/
);

expect(() => asyncRequest({
    url: "/test-endpoint-but-with-a-long-url"
})).toThrowError(
    /Required\\sparameter/
);

expect(() => asyncRequest({
    url: "/test-endpoint-but-with-a-suuuuuuuuper-long-url"
})).toThrowError(
    /Required\\sparameter/
);

expect(() => asyncRequest({
    type: "foo",
    url: "/test-endpoint"
})).not.toThrowError();

expect(() => asyncRequest({
    type: "foo",
    url: "/test-endpoint-but-with-a-long-url"
})).not.toThrowError();

const a = Observable.fromPromise(
    axiosInstance.post("/carts/mine")
).map(
    (response) => response.data
);

const b = Observable.fromPromise(
    axiosInstance.get(url)
).map(
    (response) => response.data
);

// func(
//   veryLoooooooooooooooooooooooongName,
//   veryLooooooooooooooooooooooooongName =>
//     veryLoooooooooooooooongName.something()
// );

promise.then((result) => (
    result.veryLongVariable.veryLongPropertyName > someOtherVariable
    ? "ok"
    : "fail"
));

================================================================================
`;

exports[`arrow_destructure.js format 1`] = `
====================================options=====================================
parsers: ["babel"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
func(function ({id}) {
  return id;
});

func(
  // stuff
  ({id}) => id
);

=====================================output=====================================
func(function ({id}) {
    return id;
});

func(
    // stuff
    function ({id}) {
        return id;
    }
);

================================================================================
`;

exports[`arrow_statement_body.js format 1`] = `
====================================options=====================================
parsers: ["babel"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
const unwrap_coordinates = (b) => {
    const inner = (a) => {
        console.log(() => {
          let x;
        });
    };
};

function not_like_this_not_like_this() {
  this.foo();
  const unwrap_coordinates = (b) => {
      const inner = (a) => {
          this.foo();
          console.log(a);
      };
      function method() {
          this.foo(() => {
            this.bar();
          });
          foo(() => {
            bar();
          });
      }
  };
}

function abc() {
  const def = (g) => {
    function hij(k) {
      const lmn = (o) => {
        this.pqr(() => {
          stu();
        });

        const v = () => {
          return {
            xyz() {
              return this.abc;
            }
          };
        }

        const w = () => {
          return class Stuff {
            xyz() {
              return this.abc;
            }
          };
        };

        const x = () => true;
      }
    }
  };
}

=====================================output=====================================
function unwrap_coordinates(b) {
    function inner(a) {
        console.log(function () {
            let x;
        });
    }
}

function not_like_this_not_like_this() {
    this.foo();
    const unwrap_coordinates = (b) => {
        const inner = (a) => {
            this.foo();
            console.log(a);
        };
        function method() {
            this.foo(() => {
                this.bar();
            });
            foo(function () {
                bar();
            });
        }
    };
}

function abc() {
    function def(g) {
        function hij(k) {
            const lmn = (o) => {
                this.pqr(function () {
                    stu();
                });

                function v() {
                    return {
                        xyz() {
                            return this.abc;
                        }
                    };
                }

                function w() {
                    return class Stuff {
                        xyz() {
                            return this.abc;
                        }
                    };
                }

                const x = () => true;
            };
        }
    }
}

================================================================================
`;

exports[`comments.js format 1`] = `
====================================options=====================================
parsers: ["babel"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// From https://stackoverflow.com/questions/12345678/how-can-i-remove-a-buggy-service-worker-or-implement-a-kill-switch

// From https://stackoverflow.com/q/33986976

const cacheGroups = {
  browser: [
    "bro-fs",
    "jeep-localforage",
    // TODO include core only
    // '@ionic/pwa-elements',
  ],
}

=====================================output=====================================
// From https://stackoverflow.com/q/12345678

// From https://stackoverflow.com/q/33986976

const cache_groups = {
    browser: [
        "bro-fs",
        "jeep-localforage"
        // TODO include core only
        // '@ionic/pwa-elements',
    ]
};

================================================================================
`;

exports[`freeze_exports_call.js format 1`] = `
====================================options=====================================
parsers: ["babel"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
export default not_a_freezing_function(thing);

=====================================output=====================================
export default Object.freeze(not_a_freezing_function(thing));

================================================================================
`;

exports[`freeze_exports_fn.js format 1`] = `
====================================options=====================================
parsers: ["babel"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
export default function thing(yo) {
  return true;
}

=====================================output=====================================
export default Object.freeze(function thing(yo) {
    return true;
});

================================================================================
`;

exports[`freeze_exports_ok.js format 1`] = `
====================================options=====================================
parsers: ["babel"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
export default Object.freeze(thing);

=====================================output=====================================
export default Object.freeze(thing);

================================================================================
`;

exports[`freeze_exports_stone.js format 1`] = `
====================================options=====================================
parsers: ["babel"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
export default stone(thing);

=====================================output=====================================
export default stone(thing);

================================================================================
`;

exports[`freeze_exports_wrap.js format 1`] = `
====================================options=====================================
parsers: ["babel"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
export default thing;

=====================================output=====================================
export default Object.freeze(thing);

================================================================================
`;

exports[`inc_dec.js format 1`] = `
====================================options=====================================
parsers: ["babel"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
let a = i++;
a = i--;
a = ++i;
a = --i;

i++;
++i;

if (true) {
  i--;
  --i;
}

function one() {
  return --i;
}
function two() {
  return i--;
}
function three() {
  return ++i;
}
function found() {
  return i++;
}

for (let i = Things.length - 1; i >= 0; i--) {
  Things[i] += 1;
  Things[i] -= 1;

  b++;
  c = --d;
}

stuff (a++);

while(a++) {
  bar();
}

=====================================output=====================================
let a = i;
i += 1;
a = i;
i -= 1;
i += 1;
a = i;
i -= 1;
a = i;

i += 1;
i += 1;

if (true) {
    i -= 1;
    i -= 1;
}

function one() {
    i -= 1;
    return i;
}
function two() {
    i -= 1;
    return i + 1;
}
function three() {
    i += 1;
    return i;
}
function found() {
    i += 1;
    return i - 1;
}

for (let i = Things.length - 1; i >= 0; i--) {
    Things[i] += 1;
    Things[i] -= 1;

    b += 1;
    d -= 1;
    c = d;
}

stuff(a++);

while (a++) {
    bar();
}

================================================================================
`;

exports[`long_string_literals.js format 1`] = `
====================================options=====================================
parsers: ["babel"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
here_is_my_super_long_function_wow(
    "here is my super long string, wow, it is so it is so it is so it is so it is so it is so it is so long!"
);

b('my "quoted" string');

b("a" + "b" + "c");

if ("here is my super long string, wow, it is so it is so it is so it is so it is so it is so it is so long!") {
  var my_little_variable = "here is my super long string, wow, it is so it is so it is so it is so it is so it is so it is so long!";
}

var a = {
  b: {
    c: {
      d: {
        e: {
          f: {
            g: {
              h: {
                i: {
                  j: {
                    k: "We've received a request to reset your bad password with another bad password.\\n" +
                    "You can change your password by hitting the button below.",
                    l: "A short line.\\nA short line.\\nA short line.\\nA short line.\\nA short line.\\nA short line.\\n"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};

=====================================output=====================================
here_is_my_super_long_function_wow(
    "here is my super long string, wow, it is so it is so " +
    "it is so it is so it is so it is so it is so long!"
);

b("my \\"quoted\\" string");

b("a" + "b" + "c");

if (
    "here is my super long string, wow, it is so it is so " +
    "it is so it is so it is so it is so it is so long!"
) {
    var my_little_variable = "here is my super long string, " +
    "wow, it is so it is so " +
    "it is so it is so it is so it is so it is so long!";
}

var a = {
    b: {
        c: {
            d: {
                e: {
                    f: {
                        g: {
                            h: {
                                i: {
                                    j: {
                                        k: "We've received a request " +
                                        "to reset your bad " +
                                        "password with another " +
                                        "bad password.\\n" +
                                        "You can change your password " +
                                        "by hitting the button below.",
                                        l: "A short line.\\n" +
                                        "A short line.\\n" +
                                        "A short line.\\n" +
                                        "A short line.\\n" +
                                        "A short line.\\nA short line.\\n"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
};

================================================================================
`;

exports[`megastrings.js format 1`] = `
====================================options=====================================
parsers: ["babel"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// Some leading comment

import something from "something.js";

fulfill(
  '"{0} (via Some Org)" <{1}>',
  [from, sender.email]
);

\`"\${from} (via Some Org)" <\${sender.email}>\`;

\`hi,
it's \${name}. \`;

a(\`Single
newline\`);

a(\`Multi
multi
newline\`);

a(\`<a>
   <indent>
</a>\`);

tag\`something\`;

const emptyCountryCode = {
  script: {
    script: \`
      if (_source.containsKey('countryCode')) {
        return _source.countryCode == null || _source.countryCode.length() == 0;
      } else {
        return true;
      }
    \`,
  },
};

// Just end.
\`here is a \${fruit}\`; // end
// Just start.
\`\${there} is a fruit\`; // start
// Start and end.
\`\${there} is a \${fruit}\`; // start and end

=====================================output=====================================
// Some leading comment

import something from "something.js";
import fulfill from "@douglascrockford/fulfill.js";

fulfill("\\"{0} (via Some Org)\\" <{1}>", [from, sender.email]);

fulfill("\\"{0} (via Some Org)\\" <{1}>", [from, sender.email]);

fulfill("hi,\\nit's {0}. ", [name]);

a("Single\\nnewline");

a("Multi\\nmulti\\nnewline");

a(\`<a>
   <indent>
</a>\`);

tag\`something\`;

const empty_country_code = {
    script: {
        script: \`
      if (_source.containsKey('countryCode')) {
        return _source.countryCode == null || _source.countryCode.length() == 0;
      } else {
        return true;
      }
    \`
    }
};

// Just end.
"here is a " + fruit; // end
// Just start.
there + " is a fruit"; // start
// Start and end.
there + " is a " + fruit; // start and end

================================================================================
`;

exports[`method_chaining.js format 1`] = `
====================================options=====================================
parsers: ["babel"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
object.foo().bar.boo.baz();

foo((stuff) => true);
bar.foo((stuff) => true);

domain
    .concept("Page")
    .val("title", "string")
    .vals("widgets", "Widget")
    .val("title", "string")
    .val("color", "Color")
    .val("foo", "Foo")
    .val("bar", "Bar");

domain
    .val(() => true)
    .concept("Page");

foo()
  .bar()
  .baz()
  .baz()
  .baz()
  .baz();

foo()
  .bar()
  .baz()
  .baz()
  .baz("Hi")
  .baz();

foo().bar.baz();

Something
  // I got a thing
  .getInstance(this.props.dao)
  // You got a thing
  .getters()

// Warm-up first
measure()
  .then(() => {
    SomethingLong();
  });

measure() // Warm-up first
  .then(() => {
    SomethingLong();
  });

angular.module('AngularAppModule')
  // Hello, I am comment.
  .constant('API_URL', 'http://localhost:8080/api');

client.execute(
Post.selectAll()
  .where(Post.id.eq(42))
  .where(Post.published.eq(true))
);

[].forEach(key => {
  data('foo')
    [key]('bar')
    .then(() => console.log('bar'))
    .catch(() => console.log('baz'));
});

cy.get('option:first')
  .should('be.selected')
  .and('have.value', 'Metallica')

domain
    .concept('Page')
    .val('title', 'string')
    .vals('widgets', 'Widget')
    .val('title', 'string')
    .val('color', 'Color')
    .val('foo', 'Foo')
    .val('bar', 'Bar');

const palindrome = str => {
  const s = str.toLowerCase().replace(/[\\W_]/g, '');
  return s === s.split('').reverse().join('');
};

action$.ofType(ActionTypes.SEARCHED_USERS)
  .map(action => action.payload.query)
  .filter(q => !!q)
  .switchMap(q =>
    Observable.timer(800) // debounce
      .takeUntil(action$.ofType(ActionTypes.CLEARED_SEARCH_RESULTS))
      .mergeMap(() =>
        Observable.merge(
          Observable.of(replace(\`?q=\${q}\`)),
          ajax
            .getJSON(\`https://api.github.com/search/users?q=\${q}\`)
            .map(res => res.items)
            .map(receiveUsers)
        )
      )
  );

wrapper.find('SomewhatLongNodeName').prop('longPropFunctionName', 'second argument that pushes this group past 80 characters')('argument').then(function() {
  doSomething();
});

of("test")
  .concept('Page')
  .val('title', 'string')
  .vals('widgets', 'Widget')
  .subscribe({
    foo() {
      bar();
    }
  })
  .val('title', 'string')
  .val('color', 'Color')
  .pipe(throwIfEmpty())
  .subscribe({
    get foo() {
      bar();
    }
  });

const sel = this.connections
  .concat(this.activities.concat(this.operators))
  .filter(x => x.selected);

=====================================output=====================================
object.foo().bar.boo.baz();

foo((stuff) => true);
bar.foo((stuff) => true);

domain.concept(
    "Page"
).val(
    "title",
    "string"
).vals(
    "widgets",
    "Widget"
).val(
    "title",
    "string"
).val(
    "color",
    "Color"
).val(
    "foo",
    "Foo"
).val(
    "bar",
    "Bar"
);

domain.val(
    () => true
).concept(
    "Page"
);

foo().bar().baz().baz().baz().baz();

foo().bar(
).baz(
).baz(
).baz(
    "Hi"
).baz();

foo().bar.baz();

Something.getInstance(
    // I got a thing
    this.props.dao
).getters(/* You got a thing */);

// Warm-up first
measure().then(function () {
    SomethingLong();
});

// Warm-up first
measure().then(
    // Warm-up first
    function () {
        SomethingLong();
    }
);

angular.module("AngularAppModule").constant(
    // Hello, I am comment.
    "API_URL",
    "http://localhost:8080/api"
);

client.execute(
    Post.selectAll(
    ).where(
        Post.id.eq(42)
    ).where(
        Post.published.eq(true)
    )
);

[].forEach(function (key) {
    data("foo")[key](
        "bar"
    ).then(
        () => console.log("bar")
    ).catch(
        () => console.log("baz")
    );
});

cy.get(
    "option:first"
).should(
    "be.selected"
).and(
    "have.value",
    "Metallica"
);

domain.concept(
    "Page"
).val(
    "title",
    "string"
).vals(
    "widgets",
    "Widget"
).val(
    "title",
    "string"
).val(
    "color",
    "Color"
).val(
    "foo",
    "Foo"
).val(
    "bar",
    "Bar"
);

function palindrome(str) {
    const s = str.toLowerCase().replace(/[\\W_]/g, "");
    return (
        s ===
        s.split(
            ""
        ).reverse(
        ).join(
            ""
        )
    );
}

action$.ofType(
    ActionTypes.SEARCHED_USERS
).map(
    (action) => action.payload.query
).filter(
    (q) => !!q
).switchMap(
    (q) => Observable.timer// debounce
    (
        800
    ).takeUntil(
        // debounce
        action$.ofType(ActionTypes.CLEARED_SEARCH_RESULTS)
    ).mergeMap(
        () => Observable.merge(
            Observable.of(replace("?q=" + q)),
            ajax.getJSON(
                "https://api.github.com/search/users?q=" + q
            ).map(
                (res) => res.items
            ).map(
                receiveUsers
            )
        )
    )
);

wrapper.find(
    "SomewhatLongNodeName"
).prop(
    "longPropFunctionName",
    "second argument that pushes this group past 80 characters"
)(
    "argument"
).then(function () {
    doSomething();
});

of("test").concept(
    "Page"
).val(
    "title",
    "string"
).vals(
    "widgets",
    "Widget"
).subscribe({
    foo() {
        bar();
    }
}).val(
    "title",
    "string"
).val(
    "color",
    "Color"
).pipe(
    throwIfEmpty()
).subscribe({
    get foo() {
        bar();
    }
});

const sel = this.connections.concat(
    this.activities.concat(this.operators)
).filter(
    (x) => x.selected
);

================================================================================
`;

exports[`naked_block.js format 1`] = `
====================================options=====================================
parsers: ["babel"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
{
    console.log(1);
}

if (!this.route) {
    return null;
}

function stuff() {
  function thing() {
    while (true) {
      hi();
    }

    {
        hi();
    }
  }

  {
      hi();
  }
}

=====================================output=====================================
(function () {
    console.log(1);
}());

if (!this.route) {
    return null;
}

function stuff() {
    function thing() {
        while (true) {
            hi();
        }

        (function () {
            hi();
        }());
    }

    (function () {
        hi();
    }());
}

================================================================================
`;

exports[`number_globals.js format 1`] = `
====================================options=====================================
parsers: ["babel"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
Number.isNaN(5);
isNaN(5);
parseInt(4);
parseFloat(5);
other(2);
thing.map(isNaN);
thing.map(Number.parseInt);

=====================================output=====================================
Number.isNaN(5);
Number.isNaN(5);
Number.parseInt(4);
Number.parseFloat(5);
other(2);
thing.map(Number.isNaN);
thing.map(Number.parseInt);

================================================================================
`;

exports[`object_spread.js format 1`] = `
====================================options=====================================
parsers: ["babel"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
func(Object.assign({
  thing: true,
  stuff: {}
}, opts));

func({
  thing: true,
  stuff: {},

  /* boo-related */

  ...opts,

  boo() {
    return {
      ...thing()
    };
  },

  /* tail comment */
});

const x = {
  ...foo,
  bar,
  ...baz
};

const y = {
  hello: true,
  ...({
    goodbye: false,
    ...x
  })
}

=====================================output=====================================
func(
    Object.assign(
        {
            thing: true,
            stuff: {}
        },
        opts
    )
);

func(
    Object.assign(
        {
            thing: true,
            stuff: {}
        },
        /* boo-related */

        opts,

        {
            boo() {
                return Object.assign({}, thing());
            }

            /* tail comment */
        }
    )
);

const x = Object.assign(
    {},
    foo,
    {
        bar
    },
    baz
);

const y = Object.assign(
    {
        hello: true
    },
    Object.assign(
        {
            goodbye: false
        },
        x
    )
);

================================================================================
`;

exports[`regex.js format 1`] = `
====================================options=====================================
parsers: ["babel"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
const a = /^((\\d+)m )?((\\d+) (\\.\\d+)?)s$/;
b(/[^0-9a-zA-Z-] foo /);

b(/^\\/dl\\/([^/]+)$/);
b(/^\\/dl\\/([^\\/]+)$/);

=====================================output=====================================
const a = /^((\\d+)m\\s)?((\\d+)\\s(\\.\\d+)?)s$/;
b(/[^0-9a-zA-Z-]\\sfoo\\s/);

b(/^\\/dl\\/([^\\/]+)$/);
b(/^\\/dl\\/([^\\/]+)$/);

================================================================================
`;

exports[`snake_case_main.js format 1`] = `
====================================options=====================================
parsers: ["babel"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
import helloYou from "./blah.js";
import MyClass from "./blah.js";
import { faceMan, ThingDog } from "./woo.js";
const { qweRty } = faceMan;
qweRty(faceMan);

let letsGoToTheACTToday;
let baseURLs;
let otherID;
let thingWERD;
let otherIDHey;
let extra_good;
let ExtraGood;
let extraG;
let extraG2000;
let extra2000Strong;

var myThing = otherID;
var otherOtherID = myThing;
const wordLine = BookPage;
const faceTime = letsGoToTheACTToday;
fooBar({oneTwo});
whosThat.overThere.doingThat("stopIt");
const fooBar = oneTwo + threeFour;
const fooBarGa = oneTwoGa || threeFourGa;
const {catDog, wolfRat} = skyGround;
helloYou.helloYou.helloYou = wordLine.thingStuff.myThing();
hhhhelloYou.helloYou.helloYou = wwwwordLine.thingStuff.myThing();
helloYou = thingStuff;
someGlobal = helloYou;

let gloopDoop = (
  scoopNoop
  ? faceIt
  : fooBar
);

function barBaz({oneTwo, threeFour}) {
  const faceIt = {
    thisIsHard: "soHard",
    itsTrue
  };
  let myThang = catDog();
  const { whoKnew } = helloYou;
  return booYah;
}

myThing(window);
whoKnew(window.document);

export default faceTime;

=====================================output=====================================
import hello_you from "./blah.js";
import MyClass from "./blah.js";
import {faceMan, ThingDog} from "./woo.js";
const {qweRty} = faceMan;
qweRty(faceMan);

let lets_go_to_the_ACT_today;
let base_URLs;
let other_ID;
let thing_WERD;
let other_ID_hey;
let extra_good;
let ExtraGood;
let extra_g;
let extra_g2000;
let extra2000_strong;

var my_thing = other_ID;
var other_other_ID = my_thing;
const word_line = BookPage;
const face_time = lets_go_to_the_ACT_today;
fooBar({oneTwo});
whosThat.overThere.doingThat("stopIt");
const foo_bar = oneTwo + threeFour;
const foo_bar_ga = oneTwoGa || threeFourGa;
const {catDog, wolfRat} = skyGround;
hello_you.helloYou.helloYou = word_line.thingStuff.myThing();
hhhhelloYou.helloYou.helloYou = wwwwordLine.thingStuff.myThing();
hello_you = thingStuff;
someGlobal = hello_you;

let gloop_doop = (
    scoopNoop
    ? faceIt
    : foo_bar
);

function bar_baz({oneTwo, threeFour}) {
    const face_it = {
        thisIsHard: "soHard",
        itsTrue
    };
    let my_thang = catDog();
    const {whoKnew} = hello_you;
    return booYah;
}

my_thing(window);
whoKnew(window.document);

export default Object.freeze(face_time);

================================================================================
`;

exports[`snake_case_nested_functions.js format 1`] = `
====================================options=====================================
parsers: ["babel"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
function getAltRouteGroups(altRoutes) {
    thingStuff[altRoutes] = true;
    thingStuff.altRoutes = [altRoutes];
    return true;
}

const x = {
  thingStuff(myDog) {
    myDog = 2;
  }
};

export default (mainRoute, altRoutes = []) => {
    mainRoute = getAltRouteGroups(altRoutes);
};

=====================================output=====================================
function get_alt_route_groups(alt_routes) {
    thingStuff[alt_routes] = true;
    thingStuff.altRoutes = [alt_routes];
    return true;
}

const x = {
    thingStuff(my_dog) {
        my_dog = 2;
    }
};

export default Object.freeze(function (main_route, alt_routes = []) {
    main_route = get_alt_route_groups(alt_routes);
});

================================================================================
`;

exports[`snake_case_object_literals.js format 1`] = `
====================================options=====================================
parsers: ["babel"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
import helloYou from "./blah.js";
import MyClass from "./blah.js";

let theExport = {
  helloYou,
  someGlobal,
  someGlobal: helloYou,
  helloYou: someGlobal,
  helloYou: {helloYou},
  MyClass,
};

export default Object.freeze(theExport);

=====================================output=====================================
import hello_you from "./blah.js";
import MyClass from "./blah.js";

let the_export = {
    helloYou: hello_you,
    someGlobal,
    someGlobal: hello_you,
    helloYou: someGlobal,
    helloYou: {helloYou: hello_you},
    MyClass
};

export default Object.freeze(the_export);

================================================================================
`;

exports[`switch.js format 1`] = `
====================================options=====================================
parsers: ["babel"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
switch(thing) {
  case "hi":
      return "sup";
  case "ho":
      break;
  default:
      throw new Error("Whoops");
}

=====================================output=====================================
switch (thing) {
case "hi":
    return "sup";
case "ho":
    break;
default:
    throw new Error("Whoops");
}

================================================================================
`;

exports[`ternary_binary.js format 1`] = `
====================================options=====================================
parsers: ["babel"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
room = room.map((row, rowIndex) => (
  row.map((col, colIndex) => (
    (rowIndex === 0 || colIndex === 0 || rowIndex === height || colIndex === width) ? 1 : 0
  ))
))

=====================================output=====================================
room = room.map((row, row_index) => row.map((col, col_index) => (
    row_index === 0 ||
    col_index === 0 ||
    row_index === height ||
    col_index === width
    ? 1
    : 0
)));

================================================================================
`;

exports[`ternary_func_call.js format 1`] = `
====================================options=====================================
parsers: ["babel"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
fn(
  bifornCringerMoshedPerplexSawder,
  askTrovenaBeenaDependsRowans,
  glimseGlyphsHazardNoopsTieTie === averredBathersBoxroomBuggyNurl &&
    anodyneCondosMalateOverateRetinol
      ? annularCooeedSplicesWalksWayWay
      : kochabCooieGameOnOboleUnweave
);

fn(
  glimseGlyphsHazardNoopsTieTie
      ? annularCooeedSplicesWalksWayWay
      : kochabCooieGameOnOboleUnweave
);

(cancelAtPeriodEnd ? cancelSubscription : resumeSubscription)(
  req.user.email,
  req.route.key
)(callback);

=====================================output=====================================
fn(
    bifornCringerMoshedPerplexSawder,
    askTrovenaBeenaDependsRowans,
    (
        glimseGlyphsHazardNoopsTieTie === averredBathersBoxroomBuggyNurl &&
            anodyneCondosMalateOverateRetinol
        ? annularCooeedSplicesWalksWayWay
        : kochabCooieGameOnOboleUnweave
    )
);

fn(
    glimseGlyphsHazardNoopsTieTie
    ? annularCooeedSplicesWalksWayWay
    : kochabCooieGameOnOboleUnweave
);

(
    cancelAtPeriodEnd
    ? cancelSubscription
    : resumeSubscription
)(
    req.user.email,
    req.route.key
)(callback);

================================================================================
`;

exports[`ternary_indent.js format 1`] = `
====================================options=====================================
parsers: ["babel"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
aaaaaaaaaaaaaaa ? bbbbbbbbbbbbbbbbbb : ccccccccccccccc ? ddddddddddddddd : eeeeeeeeeeeeeee ? fffffffffffffff : gggggggggggggggg

aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
?
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
?
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
?
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
:
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
:
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
:
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa

a
    ? {
        a: 0
      }
    : {
        a: {
             a: 0
           }
            ? {
                a: 0
              }
            : {
                y: {
                    a: 0
                }
                    ? {
                        a: 0
                    }
                    : {
                        a: 0
                    }
            }
      }

a
	? {
			a: function() {
				return a
					? {
							a: [
								a
									? {
											a: 0,
											b: [
												a
													? [
															0,
															1
													  ]
													: []
											]
									  }
									: [
											[
												0,
												{
													a: 0
												},
												a
													? 0
													: 1
											],
											function() {
												return a
													? {
															a: 0
													  }
													: [
															{
																a: 0
															},
															{}
													  ];
											}
									  ]
							]
					  }
					: [
							a
								? function() {
										a
											? a(
													a
														? {
																a: a(
																	{
																		a: 0
																	}
																)
														  }
														: [
																0,
																a(),
																a(
																	a(),
																	{
																		a: 0
																	},
																	a
																		? a()
																		: a(
																				{
																					a: 0
																				}
																		  )
																),
																a()
																	? {
																			a: a(),
																			b: []
																	  }
																	: {}
														  ]
											  ):
										a(
											a()
												? {
														a: 0
												  }
												: (function(a) {
														return a()
															? [
																	{
																		a: 0,
																		b: a()
																	}
															  ]
															: a(
																	[
																		a
																			? {
																					a: 0
																			  }
																			: {},
																		{
																			a: 0
																		}
																	]
															  );
												  })(
														a
															? function(a) {
																	return function() {
																		return 0;
																	};
															  }
															: function(a) {
																	return function() {
																		return 1;
																	}
															  }
												  )
										);
								  }
								: function() {

								  }
					  ];
			}
	  }
    : a;

=====================================output=====================================
(
    aaaaaaaaaaaaaaa
    ? bbbbbbbbbbbbbbbbbb
    : (
        ccccccccccccccc
        ? ddddddddddddddd
        : (
            eeeeeeeeeeeeeee
            ? fffffffffffffff
            : gggggggggggggggg
        )
    )
);

(
    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
    ? (
        aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
        ? (
            aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
            ? aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
            : aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
        )
        : aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
    )
    : aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
);

(
    a
    ? {
        a: 0
    }
    : {
        a: (
            {
                a: 0
            }
            ? {
                a: 0
            }
            : {
                y: (
                    {
                        a: 0
                    }
                    ? {
                        a: 0
                    }
                    : {
                        a: 0
                    }
                )
            }
        )
    }
);

(
    a
    ? {
        a: function () {
            return (
                a
                ? {
                    a: [
                        (
                            a
                            ? {
                                a: 0,
                                b: [
                                    (
                                        a
                                        ? [0, 1]
                                        : []
                                    )
                                ]
                            }
                            : [
                                [
                                    0,
                                    {
                                        a: 0
                                    },
                                    (
                                        a
                                        ? 0
                                        : 1
                                    )
                                ],
                                function () {
                                    return (
                                        a
                                        ? {
                                            a: 0
                                        }
                                        : [
                                            {
                                                a: 0
                                            },
                                            {}
                                        ]
                                    );
                                }
                            ]
                        )
                    ]
                }
                : [
                    (
                        a
                        ? function () {
                            (
                                a
                                ? a(
                                    a
                                    ? {
                                        a: a({
                                            a: 0
                                        })
                                    }
                                    : [
                                        0,
                                        a(),
                                        a(
                                            a(),
                                            {
                                                a: 0
                                            },
                                            (
                                                a
                                                ? a()
                                                : a({
                                                    a: 0
                                                })
                                            )
                                        ),
                                        (
                                            a()
                                            ? {
                                                a: a(),
                                                b: []
                                            }
                                            : {}
                                        )
                                    ]
                                )
                                : a(
                                    a()
                                    ? {
                                        a: 0
                                    }
                                    : (function (a) {
                                        return (
                                            a()
                                            ? [
                                                {
                                                    a: 0,
                                                    b: a()
                                                }
                                            ]
                                            : a([
                                                (
                                                    a
                                                    ? {
                                                        a: 0
                                                    }
                                                    : {}
                                                ),
                                                {
                                                    a: 0
                                                }
                                            ])
                                        );
                                    })(
                                        a
                                        ? function (a) {
                                            return function () {
                                                return 0;
                                            };
                                        }
                                        : function (a) {
                                            return function () {
                                                return 1;
                                            };
                                        }
                                    )
                                )
                            );
                        }
                        : function () {}
                    )
                ]
            );
        }
    }
    : a
);

================================================================================
`;

exports[`ternary_nested.js format 1`] = `
====================================options=====================================
parsers: ["babel"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
const message =
    i % 3 === 0 && i % 5 === 0 ?
        'fizzbuzz'
    : i % 3 === 0 ?
        'fizz'
    : i % 5 === 0 ?
        'buzz'
    :
        String(i)

const paymentMessage = state == 'success'
  ? 'Payment completed successfully'

: state == 'processing'
  ? 'Payment processing'

: state == 'invalid_cvc'
  ? 'There was an issue with your CVC number'

: state == 'invalid_expiry'
  ? 'Expiry must be sometime in the past.'

  : 'There was an issue with the payment.  Please contact support.'

const paymentMessage2 = state == 'success'
  ? 1 //'Payment completed successfully'

: state == 'processing'
  ? 2 //'Payment processing'

: state == 'invalid_cvc'
  ? 3 //'There was an issue with your CVC number'

: true //state == 'invalid_expiry'
  ? 4 //'Expiry must be sometime in the past.'

  : 5 // 'There was an issue with the payment.  Please contact support.'

=====================================output=====================================
const message = (
    i % 3 === 0 && i % 5 === 0
    ? "fizzbuzz"
    : (
        i % 3 === 0
        ? "fizz"
        : (
            i % 5 === 0
            ? "buzz"
            : String(i)
        )
    )
);

const payment_message = (
    state == "success"
    ? "Payment completed successfully"
    : (
        state == "processing"
        ? "Payment processing"
        : (
            state == "invalid_cvc"
            ? "There was an issue with your CVC number"
            : (
                state == "invalid_expiry"
                ? "Expiry must be sometime in the past."
                : "There was an issue with the payment.  " +
                "Please contact support."
            )
        )
    )
);

const payment_message2 = (
    state == "success"
    ? 1 //'Payment completed successfully'
    : (
        state == "processing"
        ? 2 //'Payment processing'
        : (
            state == "invalid_cvc"
            ? 3 //'There was an issue with your CVC number'
            : (
                true //state == 'invalid_expiry'
                ? 4 //'Expiry must be sometime in the past.'
                : 5
            )
        )
    )
); // 'There was an issue with the payment.  Please contact support.'

================================================================================
`;

exports[`ternary_parenthesis.js format 1`] = `
====================================options=====================================
parsers: ["babel"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
debug ? this.state.isVisible ? "partially visible" : "hidden" : null;
debug ? this.state.isVisible && somethingComplex ? "partially visible" : "hidden" : null;

a => a ? () => {a} : () => {a}
a => a ? a : a
a => a ? aasdasdasdasdasdasdaaasdasdasdasdasdasdasdasdasdasdasdasdasdaaaaaa : a

str = min + ":" + (sec < 10 ? "0" + sec : sec);
str = (sec < 10 ? "0" + sec : sec) + ":" + min;

let i = inc > 0 ? 0 : main_route.features.length - 1;

=====================================output=====================================
(
    debug
    ? (
        this.state.isVisible
        ? "partially visible"
        : "hidden"
    )
    : null
);
(
    debug
    ? (
        this.state.isVisible && somethingComplex
        ? "partially visible"
        : "hidden"
    )
    : null
);

(a) => (
    a
    ? function () {
        a;
    }
    : function () {
        a;
    }
);
(a) => (
    a
    ? a
    : a
);
(a) => (
    a
    ? aasdasdasdasdasdasdaaasdasdasdasdasdasdasdasdasdasdasdasdasdaaaaaa
    : a
);

str = min +
":" +
(
    sec < 10
    ? "0" + sec
    : sec
);
str = (
    sec < 10
    ? "0" + sec
    : sec
) +
":" +
min;

let i = (
    inc > 0
    ? 0
    : main_route.features.length - 1
);

================================================================================
`;

exports[`typeof.js format 1`] = `
====================================options=====================================
parsers: ["babel"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
if (typeof thing === "undefined") {
  return (
    foo === undefined ||
    typeof stuff !== "undefined"
  );
}

=====================================output=====================================
if (thing === undefined) {
    return foo === undefined || stuff !== undefined;
}

================================================================================
`;
